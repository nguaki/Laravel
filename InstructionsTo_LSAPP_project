1. Upgrade to php 7.0
git clone https://github.com/elijahcruz12/PHP-7-Installer-for-C9.IO.git

cd PHP-7-Installer-for-C9.IO/

python c9.io.php.py


2. Create a new laravel project

composer create-project  laravel/laravel lsapp

3. Find out the latest version

php --version       7.0.32
php artisan --version 5.5.28

3.5 mysql-ctl cli

4. This is where everything begins
lsapp/public/index.php 

5. Laravel File Structure

MODEL -  app/

VIEW  -  resources/views

CONTROLLER - Http/Controllers

ROUTES - routes/

6. resources/sass/app.scss
   it is importing files from node_modules directory.
   this means node_modules directory needs to be populated using npm_install.
   from lsapp directory, need to run 'npm install'.
   npm install will be based on package.json file.
   if you look at package.json, there is a dependency 'bootstrap-sass' which 
   needs to be populated.
  
7. To make _variables.scss variable to work. 
   a. modify a variable name.
   b. from cli,  run 'npm run dev'.
   c. from URL, see the change.
  
8. In order to automatically makes changes to scss file, run 'npm run watch'.

9. In order to create customize SCSS
   a. Under resources/sass, create file with extension scss. e.g. _custom.scss
   b. From custom.scss, add HTML/CSS tag.  e.g. body{  background: red !important )
      !important is SCSS tag which implies that this definition overrides.
   c. Add a new line in app.scss,  @import "custom"; 
   
10. How to import navbar file.
   a. create resources/views/inc/navbar.blade.php
   b. from layouts/app.blade.php, add a line @include "inc/navbar"
   
11. Get source code to navbar
    a. www.getbootstrap.com
    b. goto Examples menu bar
    c. goto starter template
    d. get source code
    e. copy the navbar piece
    
12. Create a database
    a. mysql-ctl cli
    b. create database lsapp;
    
13. Create a new controller
    a.php artisan make:controller PostsController  (note: Posts - plural)
    b.Under Controllers folder, there should be PostsController.php create.
    
14. Create a new model with database (-m means to create database)
    a.php artisan make:model Post -m (note: Post - singular)
    b. Inside app folder and right after Providers folder, there should be a new
       file called Post.php.
    c. Inside database folder there is a file called  xxxx_create_posts_table.php where
       xxxx represents the date stamp of the file.
       
       
15. Enter these 2 lines into   xxxx_create_posts_table.php
            $table->string('title');
            $table->mediumText('body');

16. Goto project directory and edit .env file.
    a. Modify DB_DATABASE to lsapp
    b. Modify DB_USERNAME to dguai
    c. Modify DB_PASSWORD
    
    
17. To avoid problem with  $table->string('title'); on the size, add these lines to AppServiceProvider.php

    use Illuminate\Support\Facades\Schema;
    public function boot()
    {
        //
        Schema::defaultStringLength(191);
    }
    
18. Execute 'php artisan migrate'

    a. Migration table created successfully.
       Migrating: 2014_10_12_000000_create_users_table
       Migrated:  2014_10_12_000000_create_users_table
       Migrating: 2014_10_12_100000_create_password_resets_table
       Migrated:  2014_10_12_100000_create_password_resets_table
       Migrating: 2018_10_29_193437_create_posts_table
       Migrated:  2018_10_29_193437_create_posts_table

    b. Now check the table lsapp:posts.
       You will see new columns.
       
19.  Use tinker to add data to Post table.

a.  php artisan tinker
>>> App\Post::count()
=> 0
>>> $post = new App\Post();
=> App\Post {#2845}
>>> $post->title = 'Post One';
=> "Post One"
>>> $post->body = 'This is the post body';
=> "This is the post body"
>>> $post->save();
=> true
 
b. Check the data in mysql. 
c. add second row of data
d. Exit out of tinker with 'quit' command.

20. Remove PostsController.php since forgot to add --resource option.
    This --resource automatically creates 7 basic methods to this class.
    The methods are index(), create(), store(), edit(), update(), show(), destroy().
    
    Manually remove this file.

21. php artisan make:controller PostsController --resource

    a. Go into PostsController.php and validate all 7 methods are created.
    
22. Run following command and you will see all the routes:

    php artisan route:list
    
+--------+----------+----------+------+-----------------------------------------------+--------------+
| Domain | Method   | URI      | Name | Action                                        | Middleware   |
+--------+----------+----------+------+-----------------------------------------------+--------------+
|        | GET|HEAD | /        |      | App\Http\Controllers\PagesController@index    | web          |
|        | GET|HEAD | about    |      | App\Http\Controllers\PagesController@about    | web          |
|        | GET|HEAD | api/user |      | Closure                                       | api,auth:api |
|        | GET|HEAD | services |      | App\Http\Controllers\PagesController@services | web          |
+--------+----------+----------+------+-----------------------------------------------+--------------+

23. In order to create routes to all 7 methods to PostsController.

Add this line to web.php under routes folder.

Route::resource('posts', 'PostsController' );

24. Now, find out about the current routes with 
    php artisan route:list
    
+--------+-----------+-------------------+---------------+-----------------------------------------------+--------------+
| Domain | Method    | URI               | Name          | Action                                        | Middleware   |
+--------+-----------+-------------------+---------------+-----------------------------------------------+--------------+
|        | GET|HEAD  | /                 |               | App\Http\Controllers\PagesController@index    | web          |
|        | GET|HEAD  | about             |               | App\Http\Controllers\PagesController@about    | web          |
|        | GET|HEAD  | api/user          |               | Closure                                       | api,auth:api |
|        | GET|HEAD  | posts             | posts.index   | App\Http\Controllers\PostsController@index    | web          |
|        | POST      | posts             | posts.store   | App\Http\Controllers\PostsController@store    | web          |
|        | GET|HEAD  | posts/create      | posts.create  | App\Http\Controllers\PostsController@create   | web          |
|        | GET|HEAD  | posts/{post}      | posts.show    | App\Http\Controllers\PostsController@show     | web          |
|        | PUT|PATCH | posts/{post}      | posts.update  | App\Http\Controllers\PostsController@update   | web          |
|        | DELETE    | posts/{post}      | posts.destroy | App\Http\Controllers\PostsController@destroy  | web          |
|        | GET|HEAD  | posts/{post}/edit | posts.edit    | App\Http\Controllers\PostsController@edit     | web          |
|        | GET|HEAD  | services          |               | App\Http\Controllers\PagesController@services | web          |
+--------+-----------+-------------------+---------------+-----------------------------------------------+--------------+

---Video #6 (Fetching Data with Eloquent)

25. Add 3 lines to Post.php
    protected $table = 'posts';
    public $primaryKey = 'id';
    public $timestamps = true;

26. Enter posts URIL to URL  like this
    https://latest-laravel-dguai.c9users.io/posts
    a. Should be blank.
    b. According to the above chart, this should direct to PostsController@index.
    
27. Create a new folder posts under resources/views

28. Create a file name index.blade.php under resources/views/posts.
    a. Enter contents.
    b. Goto URL and https://latest-laravel-dguai.c9users.io/posts
    c. Validate the contents.  Should not be blank.
    
29. From index() method of PostsController class, enter following lines:
    
        $posts = Post::all();
        return view('posts.index')->with('posts',$posts);

30. Write blade code to display $posts using bootstrap. Write in  index.blade.php    

31. From resources/views/inc/navbar.blade.php, add a new menu item
    <li><a href="\posts">Blog</a></li>
    
32. Create a hyperlink from posts/index.blade.php,
                <h3><a href="/posts/{{$post->id}}">{{$post->title}}</a></h3>
    a. Refresh the page.
    b. Should see the hyperlink when mouse hovers on 'Post 1' or 'Post 2'.
    c. Click on 'Post 1'. URI should read /posts/1
    
33. Add this line to show() method of PostsController class:
            return Post::find($id);
    a. Should display JSON data when clicking 'Post 1'.
    
34. Send JSON data to show.blade.php upder posts directory.

35. Write blade code to display the body of the blog.

36. For pagination
    a. Insert        
       $posts = Post::orderBy('title','desc')->paginate(1);   //Pagination. # of items per page
    b. Add this line in index.blade.php
    /resources/views/posts/index.balde.php
    {{$posts->links()}}


Video #7 (Forms and Saving Data)

37. https://latest-laravel-dguai.c9users.io/posts/create should be the page for form display.

    a. Add following line to PostsController->create()
       return view('posts.create');
    b. Create /resources/posts/create.blade.php
    
38. In order to use laravelcollective.com, do the following:
    a.composer require "laravelcollective/html":"^5.4.0"
    b.config/app.php
        Add this line to provider
        
        Collective\Html\HtmlServiceProvider::class,

    c. Add these 2 lines to aliases
        'Form' => Collective\Html\FormFacade::class,
        'Html' => Collective\Html\HtmlFacade::class,

39. Create a form in post/create.blade.php using Laravel collectives.

40. Press submit button, it should be going to posts/store.
    URI will not show store.  It will only show posts.
    
41. Need to define PostsController->store().

     $this->validate($request, [
            'title' => 'required',
            'body'  => 'required'
        ]);
        
42.  Submit buttons withous text inputs not filled.  It should not process the 
     form due to validation rules.

     Once any text has been entered, it should process the form.
     
43.  For displaying error messages when a form has been submitted,

     create a file views/inc/messages.blade.php
     
44.  Important note: Since the validation rules have been created, Laravel will
     generate error messages and they will be stored in $errors.
     
     a. Define form related error messages on messages.blade.php
     b. Define session related error messages on messages.blade.php

45.  Need to include messages.blade.php inside views/layouts/app.blade.php.
            @include('inc/messages');
            @yield('content')

     Note that inc.messages doesn't work. Must use slash not dot.
     
46. Complete PostsController->store() with writing inserting a record into DB using Eloquent.

        $post = new Post;
        $post->title = $request->input('title');
        $post->body = $request->input('body');
        $post->save();
        
        //success is $_SESSION['success']
        return redirect('/posts')->with('success', 'Post Create'); <==redirect with a messages
        
47. Now test this by goint to posts/create URI.

48. Now make this User friendly, create a new item in Navbar:

             <ul class="nav navbar-nav navbar-right">
               <li><a href="\posts\create">Create</a></li>
             </ul>
             
Purpose of next 5 or so instructions is to create edit tool for
the text area.

49. Search for laravel-ckeditor from google.
    Should direct to github.
    
50. Per instruction from github, execute
    composer require unisharp/laravel-ckeditor
    
51. Need to add this line to config/app.php, under Provider array section.
    Unisharp\Ckeditor\ServiceProvider::class,
    
52. Publish resources?
    php artisan vendor:publish --tag=ckeditor

53. Per instruction from github, add these lines to app.blade.php under layout folder.


    <script src="/vendor/unisharp/laravel-ckeditor/ckeditor.js"></script>
    <script>
        CKEDITOR.replace( 'article-ckeditor' );
    </script>

     
     
54. Add this line to create.blade.php

    {{Form::textarea('body', '', ['id'=>'article-ckeditor', 'class'=>'form-control', 'placeholder'=>'Body text'])}} 
    Note that 'id'=>'article-ckeditor'
    
55. In order strip html tags out, 

    Convert {{$post->body}} to {!!$post->body!!}.
    
    Note that, DB shows:
    mysql> select * from posts;
+----+------------+-------------------------------------------+---------------------+---------------------+
| id | title      | body                                      | created_at          | updated_at          |
+----+------------+-------------------------------------------+---------------------+---------------------+
|  1 | Post One   | This is the post body                     | 2018-11-03 03:31:59 | 2018-11-03 03:31:59 |
|  2 | Post Two   | This is post two body                     | 2018-11-03 03:37:04 | 2018-11-03 03:37:04 |
|  3 | post three | Post three body                           | 2018-11-03 20:07:32 | 2018-11-03 20:07:32 |
|  4 | post four  | <p>This is post <strong>four</strong></p> | 2018-11-03 21:38:18 | 2018-11-03 21:38:18 |
+----+------------+-------------------------------------------+---------------------+---------------------+

Last row shows that the body contains html tags.

Video #8 (Edit and Delete Data)


    
    
